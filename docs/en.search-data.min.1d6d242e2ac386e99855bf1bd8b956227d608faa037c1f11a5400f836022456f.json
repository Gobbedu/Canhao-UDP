[{"id":0,"href":"/Canhao-UDP/docs/canh%C3%A3o-udp/canh%C3%A3o/","title":"Canhão","section":"Canhão UDP","content":"Canhão UDP #   Descrição #  Este trabalho consiste da implementação de um sistema cliente-servidor, onde o sistema irá operar sobre o protocolo de transporte UDP.\nNesta implementação, o cliente irá enviar uma quantidade significativa de dados (\u0026ldquo;canhão\u0026rdquo;) para o servidor. Ao receber os dados, o servidor irá tomar conta e analisar conforme as mensagens chegam, quais pacotes tiveram sua ordem invertida e quantos pacotes nunca chegaram.\nObjetivo #  O objetivo deste trabalho é poder medir o desempenho da rede, ao medir quantos pacotes tiveram sua ordem de chegada invertida e quantos não chegaram ao final.\nPrimeiramente, o servidor deve ser executado e deixado \u0026ldquo;rodando\u0026rdquo; antes de se executar o cliente. Ao ser executado, o servidor irá tentar obter seu endereço IP, abrir um socket e solicitar o uso da porta especificada para o sistema operacional. Em seguida, o servidor entrará em um laço infinito, onde irá receber mensagens do cliente e irá salvar no log a sequência de eventos que vão ocorrer. Caso o número de pacotes enviados seja inferior ao número de pacotes recebidos, o servidor irá enviar um mensagem de erro após 10 segundos sem receber novos pacotes.\nOs clientes iniciam em uma sequência de passos semelhante, onde irão tentar obter o endereço IP do servidor e criar um socket. Neste ponto, o sistema está pronto para iniciar o tráfego de mensagens.\nMais detalhes sobre a execução do servidor e do cliente são apresentados nestes links.\n"},{"id":1,"href":"/Canhao-UDP/docs/canh%C3%A3o-udp/cliente/","title":"Cliente","section":"Canhão UDP","content":"Cliente UDP #  O objetivo do cliente é simples, apenas execute\n./cliente \u0026lt;endereço servidor\u0026gt; \u0026lt;porta\u0026gt; \u0026lt;número de pacotes\u0026gt; Para enviar ao servidor na porta \u0026lt;porta\u0026gt; com \u0026lt;número de pacotes\u0026gt; pacotes. Estes pacotes serão enviados em ordem, de 1 a N, Cada pacote é enviado uma vez, e contém em seus dados o número da sequencia enviada e o número de pacotes totais a serem enviados.\nKernel #  A parte central de execução deste código é realçado abaixo\nlong int num_total = atol(argv[3]); // ascii to long int  printf(\u0026#34;Iniciando envio de mensagens!\\n\u0026#34;); printf(\u0026#34;Serão enviadas %ld mensagens!\\n\u0026#34;, num_total); for(long int msg = 1; msg \u0026lt;= num_total; msg++){ memset(buffer,0,BUFSIZ+1); // limpa o buffer  // transforma int msg em char *dados;  sprintf(dados, \u0026#34;%ld %ld\u0026#34;, msg, num_total); if(sendto(sockdescr, dados, strlen(dados)+1, 0, (struct sockaddr *) \u0026amp;servaddr, sizeof(servaddr)) != strlen(dados)+1) { perror(\u0026#34;Nao consegui transmitir dados\u0026#34;); exit(1); } } printf(\u0026#34;Todas as mensagens foram enviadas com sucesso!\\n\\n\u0026#34;); Fonte #  O código fonte RAW pode ser acessado aqui.  Mais informações sobre a origem do código fonte podem ser vistos na pagina home do site\n"},{"id":2,"href":"/Canhao-UDP/docs/canh%C3%A3o-udp/servidor/","title":"Servidor","section":"Canhão UDP","content":"Servidor UDP #  O objetivo do servidor é analisar as mensagens recebidas e imprimir em um log a sequência de eventos que vão ocorrer. Por exemplo, qual sequência chegou em ordem, em qual momento uma mensagem chegou fora da sequência, etc.\nO servidor deve ser executado da seguinte maneira:\n./servidor \u0026lt;porta\u0026gt; De forma que o socket ficará ouvindo em um loop infinito na porta \u0026lt;porta\u0026gt;. O socket do servidor foi configurado para retornar um erro de timeout a cada 10 segundos, função que nos auxilia a verificar se mensagens do cliente nunca chegaram, para o servidor encerrar esta análise e voltar a ouvir na porta, esperando uma nova leva de mensagens.\nO socket foi configurado da seguinte maneira para retornar timeout:\n// seta recv socket options to timeout at 10 seconds  struct timeval optval; optval.tv_sec = 10; optval.tv_usec = 0; if (setsockopt(sock_escuta, SOL_SOCKET, SO_RCVTIMEO, \u0026amp;optval, sizeof(optval)) \u0026lt; 0) { perror(\u0026#34;Nao consegui setar timeout\u0026#34;); exit(1); } Kernel #  A parte central de execução deste código é realçado abaixo, a sessão que reinicia os parâmetros para ouvir a uma nova leva de mensagem foram omitidos aqui, mas podem ser visualizados no código RAW disponibilizado no link no final desta página.\nlong int esperado = 1, // primeira mensagem esperada  num_total = -1, // numero total de mensagens  contador = 0, // contador de mensagens recebidas  recebeu; // mensagem recebida  int recebendo_sequencia = 0; // flag para log de sequencia: serv recebeu [1 .. X] OK  while(1) { unsigned int i = sizeof(clientaddr); memset(buffer, 0, BUFSIZ); // Limpa o buffer  // Recebe mensagem do cliente  int bytes = recvfrom(sock_escuta, buffer, BUFSIZ, 0, (struct sockaddr *) \u0026amp;clientaddr, \u0026amp;i); // houve erro no recv  if((bytes \u0026lt; 1) \u0026amp;\u0026amp; (errno == EAGAIN || errno == EWOULDBLOCK)){ // nao faz nada se nao iniciou canhao  if(num_total == -1) { continue; } // houve erro, encerra log com ultima mensagem recebida  printf(\u0026#34;%ld ] OK\\n\u0026#34;, esperado-1); printf(\u0026#34;Servidor erro timeout recv : (%s); errno: (%d)\\n\u0026#34;, strerror(errno), errno); break; } // Encontra o numero de sequencia na mensagem  recebeu = atol(strtok(buffer, \u0026#34; \u0026#34;)); contador++; // setar o numero total da sequencia uma vez  if(num_total == -1) { num_total = atol(strtok(NULL, \u0026#34; \u0026#34;)); } // esperava I, encontrou J =\u0026gt; fora de sequencia, espera J++  if(recebeu != esperado){ // quebrou sequencia, finaliza seq no log  if(recebendo_sequencia){ printf(\u0026#34;%ld ] OK\\n\u0026#34;, esperado-1); } // avisa que perdeu sequencia no log  printf(\u0026#34;Servidor esperava %ld, \\ recebeu %ld =\u0026gt; fora de sequencia, espera %ld\\n\u0026#34;, esperado, recebeu, recebeu+1); esperado = recebeu+1; recebendo_sequencia = 0; } // recebeu [1 ate X] OK  else if(recebeu == esperado){ // reiniciando uma sequencia  if(!recebendo_sequencia){ printf(\u0026#34;Servidor recebeu [ %ld .. \u0026#34;, recebeu); recebendo_sequencia = 1; } // no meio de sequencia, continua  esperado = recebeu+1; } if(contador == num_total) { if(recebendo_sequencia){ printf(\u0026#34;%ld ] OK\\n\u0026#34;, esperado-1); } printf(\u0026#34;Servidor canhao: Todas as mensagens foram recebidas!\\n\u0026#34;); break; } } if(contador != num_total){ printf(\u0026#34;Servidor canhao: foram perdidas %ld mensagens\\n\u0026#34;, num_total - contador); } Fonte #  O código fonte RAW pode ser acessado aqui.  Mais informações sobre a origem do código fonte podem ser vistos na pagina home do site.\n"},{"id":3,"href":"/Canhao-UDP/docs/canh%C3%A3o-udp/udp/","title":"UDP","section":"Canhão UDP","content":"User Datagram Protocol (UDP) #  O Protocolo UDP é um protocolo de comunicação utilizado em toda a internet para transmissões com validade especialmente limitada, tais como reproduções de vídeo ou pesquisas no DNS. Ele acelera as comunicações ao não estabelecer formalmente uma conexão antes que os dados sejam transferidos. Isso permite que os dados sejam transferidos muito rapidamente, mas também pode fazer com que pacotes se percam em trânsito além de criar oportunidades de exploração na forma de ataques DDoS.\nNeste site/relatório é analisado um algoritmo que testa a perda e inversão na ordem dos pacotes em uma rede utilizando este protocolo. mais detalhes podem ser visos na página canhão.\n"},{"id":4,"href":"/Canhao-UDP/docs/hugo-utils/buttons/","title":"Buttons","section":"Hugo Utils","content":"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":5,"href":"/Canhao-UDP/docs/hugo-utils/columns/","title":"Columns","section":"Hugo Utils","content":"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "},{"id":6,"href":"/Canhao-UDP/docs/hugo-utils/details/","title":"Details","section":"Hugo Utils","content":"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content #  Lorem markdownum insigne\u0026hellip;   "},{"id":7,"href":"/Canhao-UDP/docs/hugo-utils/expand/","title":"Expand","section":"Hugo Utils","content":"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "},{"id":8,"href":"/Canhao-UDP/docs/hugo-utils/hints/","title":"Hints","section":"Hugo Utils","content":"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":9,"href":"/Canhao-UDP/docs/hugo-utils/katex/","title":"Katex","section":"Hugo Utils","content":"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt;/* katex [display] [class=\u0026#34;text-center\u0026#34;] */\u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt;/* /katex */\u0026gt;}}     Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":10,"href":"/Canhao-UDP/docs/hugo-utils/mermaid/","title":"Mermaid","section":"Hugo Utils","content":"Mermaid Chart #  MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n Example #  {{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt;/* /mermaid */\u0026gt;}}     "},{"id":11,"href":"/Canhao-UDP/docs/hugo-utils/tabs/","title":"Tabs","section":"Hugo Utils","content":"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS #  This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux #  This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows #  This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "}]